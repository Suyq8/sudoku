// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0--rc3
// source: pkg/sudoku/sudoku.proto

package sudoku

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sudoku_GetSolution_FullMethodName = "/sudoku.Sudoku/GetSolution"
)

// SudokuClient is the client API for Sudoku service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SudokuClient interface {
	GetSolution(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Solution, error)
}

type sudokuClient struct {
	cc grpc.ClientConnInterface
}

func NewSudokuClient(cc grpc.ClientConnInterface) SudokuClient {
	return &sudokuClient{cc}
}

func (c *sudokuClient) GetSolution(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, Sudoku_GetSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SudokuServer is the server API for Sudoku service.
// All implementations must embed UnimplementedSudokuServer
// for forward compatibility
type SudokuServer interface {
	GetSolution(context.Context, *Question) (*Solution, error)
	mustEmbedUnimplementedSudokuServer()
}

// UnimplementedSudokuServer must be embedded to have forward compatible implementations.
type UnimplementedSudokuServer struct {
}

func (UnimplementedSudokuServer) GetSolution(context.Context, *Question) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolution not implemented")
}
func (UnimplementedSudokuServer) mustEmbedUnimplementedSudokuServer() {}

// UnsafeSudokuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SudokuServer will
// result in compilation errors.
type UnsafeSudokuServer interface {
	mustEmbedUnimplementedSudokuServer()
}

func RegisterSudokuServer(s grpc.ServiceRegistrar, srv SudokuServer) {
	s.RegisterService(&Sudoku_ServiceDesc, srv)
}

func _Sudoku_GetSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Question)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SudokuServer).GetSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sudoku_GetSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SudokuServer).GetSolution(ctx, req.(*Question))
	}
	return interceptor(ctx, in, info, handler)
}

// Sudoku_ServiceDesc is the grpc.ServiceDesc for Sudoku service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sudoku_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sudoku.Sudoku",
	HandlerType: (*SudokuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSolution",
			Handler:    _Sudoku_GetSolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/sudoku/sudoku.proto",
}
